from django.shortcuts import render
from django.http import HttpResponse, JsonResponse
from django.template import RequestContext
from bson.objectid import ObjectId
import requests
import json
import pymongo
import datetime
import collections
import monthdelta

from collections import Counter
from datetime import timedelta
from .models import status_machine
from pymongo import Connection


def index(request):
    REST_URL = "http://10.17.117.12:8090/machines/list"

    request_url = requests.get(REST_URL)
    if request_url.status_code == 200:
        json_decoder = json.JSONDecoder()
        list_VM = json_decoder.decode(request_url.text)["machines"]
    else:
        list_VM = {}
    VM = []
    for k in list_VM:

        VM.append(k["name"])
    context = RequestContext(request, { 'VM' : VM})
    return render(request, 'webmord/index.html', context)

def get_status(request, machine_id):
    REST_URL = "http://10.17.117.12:8090/machines/view/"+machine_id

    request_url = requests.get(REST_URL)

    json_decoder = json.JSONDecoder()
    machine_list = json_decoder.decode(request_url.text)["machine"]
    machine = machine_list
    context = RequestContext(request, {'machine' : machine, })
    return render(request, 'webmord/status.html', context)

def xhr_test(request):
    now_date = datetime.datetime.now()
    date_ph = now_date - timedelta(hours = 1)
    date_pd = now_date - timedelta(days = 1)
    date_pm = now_date - monthdelta.monthdelta(1)
    connection = Connection('10.17.117.48', 27017)
    db = connection.samsdb
    req_db = db.fid.find()
    count_md5 = []
    uniq_sample = []
    uniq_send = []
    uniq_recip = []
    count_md5_uniq = []
    uniq_received = []
    uniq_id = []
    req_db_stats_hour = db.analysis.find({'timestamp': {'$gte': date_ph, '$lt': now_date}})
    req_db_stats_day = db.analysis.find({'timestamp': {'$gte': date_pd, '$lt': now_date}})
    req_db_stats_month = db.analysis.find({'timestamp': {'$gte': date_pm, '$lt': now_date}})
    req_db_hour = req_db_stats_hour.count()
    for md5c in req_db_stats_day:
        if md5c['status'] == 'done':
            uniq_sample.append(md5c['hashes']['md5'])
    count_md5_uniq = Counter(uniq_sample).most_common(10)

    for send in req_db_stats_month:
        if send['status'] == 'done':
            uniq_send.append(send['sender'])
            uniq_recip.append(send['recipient'])
            for n in send['received']:

#               uniq_received.append(n['received'])
#            for c in uniq_received:
#                uniq_id.append(c['id'])
    count_sender_uniq = Counter(uniq_send).most_common(10)
    count_recipient_uniq = Counter(uniq_recip).most_common(10)
    findex = req_db[0]["FIndex"]
    day = req_db[0]["Day"]
    context = {'findex' : findex, 'day' : day, 'req_db_hour' : req_db_hour, 'count_md5_uniq' : count_md5_uniq, 'count_sender_uniq' : count_sender_uniq, 'count_recipient_uniq' : count_recipient_uniq}
    return JsonResponse(context)


def search (request):
    connection = Connection('10.17.117.48', 27017)
    db = connection.samsdb
    errors = []
    sender = []
    recipient = []
    id = []
    result = []
    search_res = []
    search_content = request.POST['search_content']
    type = request.POST['search_type']
    if type == "md5":
        req_db_stats_search = db.analysis.find( { 'hashes.md5': search_content})
    if type == "recipient":
        req_db_stats_search = db.analysis.find( { 'recipient': search_content})
    else:
        errors.append('Cant get POST data')
    for send in req_db_stats_search:
        if send['status'] == 'done':
            sender.append(send['sender'])
            recipient.append(send['recipient'])
            id.append(send['_id'])
    context = RequestContext(request, {'sender' : sender, 'recipient': recipient, 'id': id})
    return render(request, 'webmord/result_s.html', context)


